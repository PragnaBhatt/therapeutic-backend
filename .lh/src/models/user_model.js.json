{
    "sourceFile": "src/models/user_model.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1662546040698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1662546056707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n   productsLikes: [\r\n     {\r\n       productsLike: {\r\n         type: mongoose.Schema.Types.ObjectId,\r\n-        ref: \"Product\",\r\n+        ref: \"FoodModel\",\r\n       },\r\n     },\r\n   ],\r\n \r\n"
                },
                {
                    "date": 1662546161966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,15 +60,9 @@\n       },\r\n     },\r\n   ],\r\n \r\n-  verificationToken: String,\r\n-  verified: Date,\r\n-  passwordToken: { type: String },\r\n-\r\n-  passwordTokenExpirationdate: {\r\n-    type: Date,\r\n-  },\r\n+  \r\n });\r\n // remove data from json\r\n userSchema.methods.toJSON = function () {\r\n   const user = this;\r\n"
                },
                {
                    "date": 1662546179708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,22 +79,22 @@\n     const salt = await bcrypt.genSalt(10);\r\n     this.password = await bcrypt.hash(this.password, salt);\r\n   }\r\n });\r\n-userSchema.statics.countNoOfLikes = async function (postId) {\r\n-  console.log(\"in to countNoOfLikes\");\r\n-  const result = await this.aggregate([\r\n-    { $match: { \"postLikes.postLike\": postId } },\r\n-    {\r\n-      $group: {\r\n-        _id: null,\r\n-        numberOfLikes: { $sum: 1 },\r\n-      },\r\n-    },\r\n-  ]);\r\n+// userSchema.statics.countNoOfLikes = async function (postId) {\r\n+//   console.log(\"in to countNoOfLikes\");\r\n+//   const result = await this.aggregate([\r\n+//     { $match: { \"postLikes.postLike\": postId } },\r\n+//     {\r\n+//       $group: {\r\n+//         _id: null,\r\n+//         numberOfLikes: { $sum: 1 },\r\n+//       },\r\n+//     },\r\n+//   ]);\r\n \r\n-  console.log(\"result..... \" + result[0].numberOfLikes);\r\n-};\r\n+//   console.log(\"result..... \" + result[0].numberOfLikes);\r\n+// };\r\n // userSchema.post(\"save\", async function () {\r\n //     console.log(\"in to save....\"+this)\r\n //\r\n //     await this.constructor.countNoOfLikes(this.postLikes.postLike)\r\n"
                },
                {
                    "date": 1662546192122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,14 +116,14 @@\n   },\r\n   { unique: true }\r\n );\r\n \r\n-userSchema.virtual(\"comments\", {\r\n-  ref: \"Comment\",\r\n-  localField: \"_id\",\r\n-  foreignField: \"user\",\r\n-  justOne: false,\r\n-});\r\n+// userSchema.virtual(\"comments\", {\r\n+//   ref: \"Comment\",\r\n+//   localField: \"_id\",\r\n+//   foreignField: \"user\",\r\n+//   justOne: false,\r\n+// });\r\n \r\n const userModel = mongoose.model(\"User\", userSchema);\r\n \r\n module.exports = userModel;\r\n"
                }
            ],
            "date": 1662546040698,
            "name": "Commit-0",
            "content": "const mongoose = require(\"mongoose\");\r\nconst bcrypt = require(\"bcrypt\");\r\nconst { isEmail } = require(\"validator\");\r\nconst { string } = require(\"sharp/lib/is\");\r\nconst userSchema = mongoose.Schema({\r\n  name: {\r\n    type: String,\r\n    trim: true,\r\n    required: [true, \"user name is required\"],\r\n    minlength: [3, \"name is too short\"],\r\n    maxlength: [30, \"name is too long\"],\r\n  },\r\n  tokens: [\r\n    {\r\n      token: { type: String, trim: true, required: true },\r\n    },\r\n  ],\r\n  OTP: { type: String, trim: true },\r\n  photo: {\r\n    type: String,\r\n  },\r\n\r\n  email: {\r\n    type: String,\r\n    unique: true,\r\n    required: [true, \"email address is required\"],\r\n    validate: {\r\n      validator: isEmail,\r\n      message: \"please provide valid email address\",\r\n    },\r\n  },\r\n  password: {\r\n    type: String,\r\n    required: true,\r\n    minlength: [6, \"password is too short\"],\r\n    maxlength: [130, \"password is too long\"],\r\n  },\r\n  userRole: {\r\n    type: String,\r\n    enum: [\"user\", \"admin\"],\r\n    required: true,\r\n    default: \"user\",\r\n  },\r\n  isActive: {\r\n    type: Boolean,\r\n    required: true,\r\n    default: true,\r\n  },\r\n  isVerified: {\r\n    type: Boolean,\r\n    required: true,\r\n    default: false,\r\n  },\r\n\r\n  productsLikes: [\r\n    {\r\n      productsLike: {\r\n        type: mongoose.Schema.Types.ObjectId,\r\n        ref: \"Product\",\r\n      },\r\n    },\r\n  ],\r\n\r\n  verificationToken: String,\r\n  verified: Date,\r\n  passwordToken: { type: String },\r\n\r\n  passwordTokenExpirationdate: {\r\n    type: Date,\r\n  },\r\n});\r\n// remove data from json\r\nuserSchema.methods.toJSON = function () {\r\n  const user = this;\r\n  const userObject = user.toObject();\r\n  delete userObject.password;\r\n  delete userObject.__v;\r\n  return userObject;\r\n};\r\n\r\nuserSchema.pre(\"save\", async function () {\r\n  const user = this;\r\n\r\n  if (user.isModified(\"password\")) {\r\n    const salt = await bcrypt.genSalt(10);\r\n    this.password = await bcrypt.hash(this.password, salt);\r\n  }\r\n});\r\nuserSchema.statics.countNoOfLikes = async function (postId) {\r\n  console.log(\"in to countNoOfLikes\");\r\n  const result = await this.aggregate([\r\n    { $match: { \"postLikes.postLike\": postId } },\r\n    {\r\n      $group: {\r\n        _id: null,\r\n        numberOfLikes: { $sum: 1 },\r\n      },\r\n    },\r\n  ]);\r\n\r\n  console.log(\"result..... \" + result[0].numberOfLikes);\r\n};\r\n// userSchema.post(\"save\", async function () {\r\n//     console.log(\"in to save....\"+this)\r\n//\r\n//     await this.constructor.countNoOfLikes(this.postLikes.postLike)\r\n// });\r\n/*userSchema.post(\"findOneAndUpdate\", async function () {\r\n    console.log(\"in to update....\")\r\n    console.log(\"in to update....\"+this)\r\n\r\n    await this.constructor.countNoOfLikes(postLikes.postLike);\r\n})*/\r\nuserSchema.methods.comparePassword = async function (passwordToCompare) {\r\n  const isMatch = await bcrypt.compare(passwordToCompare, this.password);\r\n  return isMatch;\r\n};\r\nuserSchema.index(\r\n  {\r\n    _id: 1,\r\n    productsLikes: 1,\r\n  },\r\n  { unique: true }\r\n);\r\n\r\nuserSchema.virtual(\"comments\", {\r\n  ref: \"Comment\",\r\n  localField: \"_id\",\r\n  foreignField: \"user\",\r\n  justOne: false,\r\n});\r\n\r\nconst userModel = mongoose.model(\"User\", userSchema);\r\n\r\nmodule.exports = userModel;\r\n"
        }
    ]
}