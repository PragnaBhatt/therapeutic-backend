{
    "sourceFile": "src/controllers/bookmark_controller.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1662546609750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1662546615719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n const {StatusCodes} = require(\"http-status-codes\");\r\n-const asyncWrapper = require(\"../middlewares/asy\");\r\n+const asyncWrapper = require(\"../middlewares/asyncWrappers\");\r\n const commentModel = require(\"../models/comment_model\");\r\n const postModel = require(\"../models/post_model\");\r\n const CustomAPIError = require(\"../errors/custom_api_error\");\r\n const BadRequestError = require(\"../errors/bad_request_error\");\r\n"
                },
                {
                    "date": 1662546635722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n const { StatusCodes } = require(\"http-status-codes\");\r\n const asyncWrapper = require(\"../middlewares/asyncWrappers\");\r\n-const Model = require(\"../models/bookmarks_model\");\r\n+const bModel = require(\"../models/bookmarks_model\");\r\n const postModel = require(\"../models/post_model\");\r\n const CustomAPIError = require(\"../errors/custom_api_error\");\r\n const BadRequestError = require(\"../errors/bad_request_error\");\r\n const NotFoundError = require(\"../errors/not-found_error\");\r\n"
                }
            ],
            "date": 1662546609750,
            "name": "Commit-0",
            "content": "const {StatusCodes} = require(\"http-status-codes\");\r\nconst asyncWrapper = require(\"../middlewares/asyncWrappers\");\r\nconst commentModel = require(\"../models/comment_model\");\r\nconst postModel = require(\"../models/post_model\");\r\nconst CustomAPIError = require(\"../errors/custom_api_error\");\r\nconst BadRequestError = require(\"../errors/bad_request_error\");\r\nconst NotFoundError = require(\"../errors/not-found_error\");\r\nconst createComment = asyncWrapper(async (req, res, next) => {\r\n    const authUser = req.authUser;\r\n    console.log(authUser.name);\r\n    const {post: postId} = req.body;\r\n    const isValidpost = await postModel.find({_id: postId});\r\n    if (! isValidpost) {\r\n        throw new CustomAPIError(\"no such post found!\");\r\n    }\r\n    // check of already comment avialbale or not with userid and prodID\r\n    const alreadycommentSubmitted = await commentModel.findOne({post: postId, user: authUser._id});\r\n    if (alreadycommentSubmitted) {\r\n        res.status(StatusCodes.OK).json({status: 1, message: \"already sumitted.....\"});\r\n    }\r\n    req.body.user = authUser._id;\r\n    // req.body.post = authUser._id;\r\n    const comment = await commentModel.create(req.body);\r\n    res.status(StatusCodes.CREATED).json({status: 1, message: \"comment added\", comment});\r\n});\r\nconst getAllComments = asyncWrapper(async (req, res, next) => {\r\n    const allcomment = await commentModel.find({})\r\n    // .populate({path: \"post\", select: \"name company price category -_id\"}) // working OK and removed _id\r\n\r\n    // .populate({ path: \"post\", select: \"name company price category _id\" }).populate({path: \"post\"}).populate({path: \"user\", select: \"name email _id\"});\r\n\r\n    res.status(StatusCodes.CREATED).json({status: 1, message: \"comment list\", allcomment});\r\n});\r\n\r\nconst getSingleComment = asyncWrapper(async (req, res, next) => {\r\n    const {id: commentId} = req.params;\r\n\r\n    if (!commentId) {\r\n        throw new BadRequestError(\"comment id not provided\");\r\n    }\r\n    const comment = await commentModel.findById({_id: commentId});\r\n\r\n    if (! comment) {\r\n        throw new NotFoundError(\"no such comment available\");\r\n    }\r\n    res.status(StatusCodes.OK).json({status: 1, message: \"comment\", comment});\r\n});\r\n\r\nconst updateComment = asyncWrapper(async (req, res, next) => {\r\n    const {id: commentId} = req.params;\r\n    // const { rating, title, comment } = req.body;\r\n\r\n    if (!commentId) {\r\n        throw new BadRequestError(\"comment id not provided\");\r\n    }\r\n    // const comment = await commentModel.findById({ _id: commentId });\r\n    // const comment = await commentModel.findByIdAndUpdate(\r\n    const comment = await commentModel.findOneAndUpdate({\r\n        _id: commentId\r\n    }, req.body, {\r\n        new: true,\r\n        runValidators: true,\r\n        strict: false\r\n    });\r\n\r\n    if (! comment) {\r\n        throw new NotFoundError(\"no such comment available\");\r\n    }\r\n\r\n    // comment.rating = rating;\r\n    // comment.title = title;\r\n    // comment.comment = comment;\r\n    // comment.save();\r\n    res.status(StatusCodes.OK).json({status: 1, message: \"comment updated\", comment});\r\n});\r\n\r\nconst deleteComment = asyncWrapper(async (req, res, next) => {\r\n    const {id: commentId} = req.params;\r\n\r\n    if (!commentId) {\r\n        throw new BadRequestError(\"comment id not provided\");\r\n    }\r\n    const comment = await commentModel.findById({_id: commentId});\r\n    if (! comment) {\r\n        throw new NotFoundError(\"no such comment available\");\r\n    }\r\n\r\n    await comment.remove();\r\n    // await commentModel.remove();\r\n\r\n    res.status(StatusCodes.OK).json({status: 1, message: \"comment removed!\"});\r\n});\r\n\r\nmodule.exports = {\r\n    createComment,\r\n    getAllComments,\r\n    getSingleComment,\r\n    updateComment,\r\n    deleteComment\r\n};\r\n"
        }
    ]
}