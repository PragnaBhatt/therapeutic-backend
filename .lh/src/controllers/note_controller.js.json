{
    "sourceFile": "src/controllers/note_controller.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1662552886666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1662552912402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,8 @@\n const foodModel = require(\"../models/food_model\");\r\n const CustomAPIError = require(\"../errors/custom_api_error\");\r\n const BadRequestError = require(\"../errors/bad_request_error\");\r\n const NotFoundError = require(\"../errors/not-found_error\");\r\n-const noteModel = require(\"../models/notes_model\");\r\n const createNote = asyncWrapper(async (req, res, next) => {\r\n   const authUser = req.authUser;\r\n   console.log(authUser.name);\r\n   const forProduct = req.body.forProduct;\r\n"
                }
            ],
            "date": 1662552886666,
            "name": "Commit-0",
            "content": "const { StatusCodes } = require(\"http-status-codes\");\r\nconst asyncWrapper = require(\"../middlewares/asyncWrappers\");\r\nconst notesModel = require(\"../models/notes_model\");\r\nconst foodModel = require(\"../models/food_model\");\r\nconst CustomAPIError = require(\"../errors/custom_api_error\");\r\nconst BadRequestError = require(\"../errors/bad_request_error\");\r\nconst NotFoundError = require(\"../errors/not-found_error\");\r\nconst noteModel = require(\"../models/notes_model\");\r\nconst createNote = asyncWrapper(async (req, res, next) => {\r\n  const authUser = req.authUser;\r\n  console.log(authUser.name);\r\n  const forProduct = req.body.forProduct;\r\n\r\n  const isValidfood = await foodModel.find({ _id: forProduct });\r\n\r\n  if (!isValidfood) {\r\n    throw new CustomAPIError(\"no such food found!\");\r\n  }\r\n  // check of already Note avialbale or not with userid and prodID\r\n  const alreadyNoteSubmitted = await notesModel.findOne({\r\n    forProduct: forProduct,\r\n\r\n    byUser: req.authUser._id,\r\n  });\r\n  console.log(\"already...\" + alreadyNoteSubmitted);\r\n  console.log(\"forProduct...\" + forProduct);\r\n\r\n  console.log(\"req.authUser._id...\" + req.authUser._id);\r\n\r\n  if (alreadyNoteSubmitted) {\r\n    return res\r\n      .status(StatusCodes.OK)\r\n      .json({ status: 1, message: \"already sumitted.....\" });\r\n  }\r\n  // req.body.user = authUser._id;\r\n  // req.body.food = authUser._id;\r\n  const Note = await notesModel.create({\r\n    ...req.body,\r\n    byUser: authUser._id,\r\n  });\r\n\r\n  res\r\n    .status(StatusCodes.CREATED)\r\n    .json({ status: 1, message: \"Note added\", Note });\r\n});\r\nconst getAllNotes = asyncWrapper(async (req, res, next) => {\r\n  const allNote = await notesModel.find({ byUser: req.authUser._id });\r\n  // .populate({path: \"food\", select: \"name company price category -_id\"}) // working OK and removed _id\r\n\r\n  // .populate({ path: \"food\", select: \"name company price category _id\" }).populate({path: \"food\"}).populate({path: \"user\", select: \"name email _id\"});\r\n\r\n  res\r\n    .status(StatusCodes.CREATED)\r\n    .json({ status: 1, message: \"Note list\", allNote });\r\n});\r\n\r\nconst getSingleNote = asyncWrapper(async (req, res, next) => {\r\n  const { id: NoteId } = req.params;\r\n\r\n  if (!NoteId) {\r\n    throw new BadRequestError(\"Note id not provided\");\r\n  }\r\n  const Note = await notesModel.findById({ _id: NoteId });\r\n\r\n  if (!Note) {\r\n    throw new NotFoundError(\"no such Note available\");\r\n  }\r\n  res.status(StatusCodes.OK).json({ status: 1, message: \"Note\", Note });\r\n});\r\n\r\nconst updateNote = asyncWrapper(async (req, res, next) => {\r\n  const { id: NoteId } = req.params;\r\n  // const { rating, title, Note } = req.body;\r\n\r\n  if (!NoteId) {\r\n    throw new BadRequestError(\"Note id not provided\");\r\n  }\r\n  // const Note = await notesModel.findById({ _id: NoteId });\r\n  // const Note = await notesModel.findByIdAndUpdate(\r\n  const Note = await notesModel.findOneAndUpdate(\r\n    {\r\n      _id: NoteId,\r\n    },\r\n    req.body,\r\n    {\r\n      new: true,\r\n      runValidators: true,\r\n      strict: false,\r\n    }\r\n  );\r\n\r\n  if (!Note) {\r\n    throw new NotFoundError(\"no such Note available\");\r\n  }\r\n\r\n  // Note.rating = rating;\r\n  // Note.title = title;\r\n  // Note.Note = Note;\r\n  // Note.save();\r\n  res.status(StatusCodes.OK).json({ status: 1, message: \"Note updated\", Note });\r\n});\r\n\r\nconst deleteNote = asyncWrapper(async (req, res, next) => {\r\n  const { id: NoteId } = req.params;\r\n\r\n  if (!NoteId) {\r\n    throw new BadRequestError(\"Note id not provided\");\r\n  }\r\n  const Note = await notesModel.findById({ _id: NoteId });\r\n  if (!Note) {\r\n    throw new NotFoundError(\"no such Note available\");\r\n  }\r\n\r\n  await Note.remove();\r\n  // await notesModel.remove();\r\n\r\n  res.status(StatusCodes.OK).json({ status: 1, message: \"Note removed!\" });\r\n});\r\nconst deleteAllNote = asyncWrapper(async (req, res, next) => {\r\n  await notesModel.remove();\r\n\r\n  // await notesModel.remove();\r\n\r\n  res.status(StatusCodes.OK).json({ status: 1, message: \"Note removed!\" });\r\n});\r\n\r\nmodule.exports = {\r\n  createNote,\r\n  getAllNotes,\r\n  getSingleNote,\r\n  updateNote,\r\n  deleteNote,\r\n  deleteAllNote,\r\n};\r\n"
        }
    ]
}