{
    "sourceFile": "src/controllers/user_controller.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1662546757784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1662548041054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -231,8 +231,9 @@\n   }\r\n   const token = generateJwtToken(user._id);\r\n   console.log(\"token....\" + token);\r\n   // user.tokens = {};\r\n+  \r\n   user.tokens = user.tokens.concat({ token });\r\n \r\n   user.save();\r\n \r\n"
                },
                {
                    "date": 1662548066772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -233,9 +233,9 @@\n   console.log(\"token....\" + token);\r\n   // user.tokens = {};\r\n // user.tokens\r\n \r\n-  user.tokens = user.tokens.concat({ token });\r\n+  user.tokens = user.tokens.({ token });\r\n \r\n   user.save();\r\n \r\n   res\r\n"
                },
                {
                    "date": 1662548163725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -232,9 +232,9 @@\n   const token = generateJwtToken(user._id);\r\n   console.log(\"token....\" + token);\r\n   // user.tokens = {};\r\n   // user.tokens\r\n-user.tokens\r\n+user.tokens=\r\n   user.tokens = user.tokens.concat({ token });\r\n \r\n   user.save();\r\n \r\n"
                }
            ],
            "date": 1662546757784,
            "name": "Commit-0",
            "content": "const asyncWrapper = require(\"../middlewares/asyncWrappers\");\r\nconst userModel = require(\"../models/user_model\");\r\nconst BadRequestError = require(\"../errors/bad_request_error\");\r\nconst { StatusCodes } = require(\"http-status-codes\");\r\nconst UnauthenticatedError = require(\"../errors/unauthenticated\");\r\nconst generateJwtToken = require(\"../utils/jwt\");\r\nconst CustomAPIError = require(\"../errors/custom_api_error\");\r\nconst nodeMailer = require(\"nodemailer\");\r\nconst sharp = require(\"sharp\");\r\nconst fs = require(\"fs\");\r\n\r\nconst createNewUser = asyncWrapper(async (req, res, next) => {\r\n  const { name, password, email } = req.body;\r\n\r\n  const isEmailAlreadyExists = await userModel.findOne({\r\n    email: req.body.email,\r\n  });\r\n  if (isEmailAlreadyExists) {\r\n    throw new BadRequestError(\"email is already exists!\");\r\n  }\r\n\r\n  // default 1st user is admin\r\n  const isFirstAccount = (await userModel.countDocuments({})) === 0;\r\n  const OTP = Math.floor(Math.random() * (90000 - 10000 + 1) + 10000);\r\n  console.log(\"having file....\");\r\n  //for file uploading\r\n  let strPhotoURL = \"\";\r\n\r\n  strPhotoURL = req.file.path;\r\n  const buffer = await sharp(req.file.path.toString())\r\n    //.resize({ width: 550, height: 550 })\r\n    .png()\r\n    .toBuffer()\r\n    .then((b) => {\r\n      fs.writeFile(req.file.path.toString(), b, function (err, result) {\r\n        if (err) {\r\n          console.log(\"error\", err);\r\n          return callback(\r\n            new Error(\"Only images (.png,.jpg,.gif,.jpeg) are allowed\")\r\n          );\r\n        }\r\n      });\r\n    });\r\n  const role = isFirstAccount ? \"admin\" : \"user\";\r\n  const user = await userModel.create({\r\n    name,\r\n    email,\r\n    password,\r\n    role,\r\n    photo: strPhotoURL,\r\n    OTP,\r\n  });\r\n  if (user) {\r\n    await emailSend(req, res, {\r\n      email: email,\r\n      name: name,\r\n      otp: OTP,\r\n      user: user,\r\n      subject: \"User Registration\",\r\n    });\r\n  } else {\r\n    res\r\n      .status(StatusCodes.NOT_FOUND)\r\n      .json({ status: 0, message: \"something went wrong on creating user \" });\r\n  }\r\n});\r\n\r\nconst emailSend = async (req, res, { email, name, otp, user, subject }) => {\r\n  // for sending email\r\n  console.log(\"in to emial send.... \" + email);\r\n  console.log(\"in to emial send.... \" + name);\r\n  let transporter = nodeMailer.createTransport({\r\n    service: \"gmail\",\r\n    auth: {\r\n      user: \"pragnabhatt.iipl@gmail.com\",\r\n\r\n      // pass: \"MyPwd@!@#4@\",\r\n      pass: \"ldgqntblmrkswmsc\",\r\n      // from where i found is https://myaccount.google.com/apppasswords?rapt=AEjHL4NMXkY3SXGxXK01KRaXT7p1NG6m1ZvEjhA81VF7E2CCQQw3ICb_AhDYHuvqnw97-vYuBC0PVw1XKotjHiDFh8giCszRDQ\r\n      // check https://myaccount.google.com/apppasswords?rapt=AEjHL4NMXkY3SXGxXK01KRaXT7p1NG6m1ZvEjhA81VF7E2CCQQw3ICb_AhDYHuvqnw97-vYuBC0PVw1XKotjHiDFh8giCszRDQ\r\n      // check 2 https://protocoderspoint.com/solution-nodemailer-username-and-password-not-accepted/\r\n    },\r\n  });\r\n  var html = \"<b>Hello, \" + name + \"</b> <p>please find OTP :\" + otp + \"</p>\";\r\n\r\n  if (!otp) {\r\n    html = \"<b> Hello,\" + name + \", welcome to our portal\";\r\n  }\r\n\r\n  let mailOptions = {\r\n    from: '\"Pragna Bhatt\" <pragnavbhatt@gmail.com>', // sender address\r\n\r\n    to: email, // list of receivers\r\n\r\n    subject: subject, // Subject line\r\n    text: \"Hello\",\r\n    // plain text body\r\n    // html: \"<b>NodeJS Email Tutorial</b>\", // html body\r\n\r\n    html: html, // html body\r\n  };\r\n\r\n  transporter.sendMail(mailOptions, (error, info) => {\r\n    if (error) {\r\n      // return\r\n      console.log(error);\r\n      // res\r\n      //   .status(StatusCodes.NOT_FOUND)\r\n      //   .json({ status: 0, message: \"something went wrong on sending email \" });\r\n      res.status(StatusCodes.OK).json({\r\n        status: 1,\r\n        message: subject + \" sucessfully,But we are unable to send email\",\r\n        user,\r\n      });\r\n    }\r\n    console.log(\"Message %s sent: %s\", info.messageId, info.response);\r\n\r\n    res.status(StatusCodes.OK).json({\r\n      status: 1,\r\n      message: subject + \" sucessfully,Please check your email\",\r\n      user,\r\n    });\r\n\r\n    // res\r\n    //   .status(StatusCodes.OK)\r\n    //   .json({ status: 1, message: \"please check email \" });\r\n  });\r\n};\r\n\r\n// verify user for login after user registration\r\n\r\nconst verifyNewUser = asyncWrapper(async (req, res, next) => {\r\n  const { email, OTP } = req.body;\r\n  if (!email || !OTP) {\r\n    throw new BadRequestError(\"please provide email and OTP for varification \");\r\n  }\r\n  const user = await userModel.findOne({ email, OTP });\r\n  if (!user) {\r\n    throw new UnauthenticatedError(\r\n      \"verification failed email address and OTP not matched \"\r\n    );\r\n  }\r\n  const userUpdate = await userModel\r\n    .findOneAndUpdate(\r\n      {\r\n        email,\r\n      },\r\n      {\r\n        isVerified: true,\r\n      },\r\n      {\r\n        new: true,\r\n        runValidators: true,\r\n      }\r\n    )\r\n    .select(\"-password\");\r\n\r\n  await emailSend(req, res, {\r\n    email: userUpdate.email,\r\n\r\n    name: userUpdate.name,\r\n\r\n    //otp: OTP,\r\n    user: userUpdate,\r\n\r\n    subject: \"Verify User\",\r\n  });\r\n\r\n  // res.status(StatusCodes.OK).json({ userUpdate });\r\n});\r\n\r\n// resend OTP\r\nconst reSendOTP = asyncWrapper(async (req, res, next) => {\r\n  if (!req.body.email) {\r\n    throw new BadRequestError(\"please provide email\");\r\n  }\r\n  const user = await userModel.findOne({ email: req.body.email });\r\n  if (!user) {\r\n    throw new UnauthenticatedError(\"user not found!\");\r\n  }\r\n\r\n  const OTP = Math.floor(Math.random() * (90000 - 10000 + 1) + 10000);\r\n  user.OTP = OTP;\r\n  user.save();\r\n  if (user) {\r\n    await emailSend(req, res, {\r\n      email: user.email,\r\n      name: user.name,\r\n      otp: OTP,\r\n      user: user,\r\n      subject: \"Re-send OTP\",\r\n    });\r\n  } else {\r\n    res\r\n      .status(StatusCodes.NOT_FOUND)\r\n      .json({ status: 0, message: \"something went wrong on OTP regeration \" });\r\n  }\r\n\r\n  // res.status(StatusCodes.OK).json({\r\n  //   status: 1,\r\n  //   message: \"your OTP is \" + OTP,\r\n  // });\r\n});\r\n\r\n// for login user\r\n\r\nconst loginUser = asyncWrapper(async (req, res, next) => {\r\n  const { email, password } = req.body;\r\n  if (!email || !password) {\r\n    throw new BadRequestError(\"please provide email and password\");\r\n  }\r\n\r\n  const user = await userModel.findOne({ email });\r\n  if (!user) {\r\n    throw new UnauthenticatedError(\"Invalid credentials\");\r\n  }\r\n  if (!user.isVerified) {\r\n    throw new UnauthenticatedError(\"user is not verified yet\");\r\n  }\r\n  if (!user.isActive) {\r\n    throw new UnauthenticatedError(\"user is not active \");\r\n  }\r\n\r\n  // .select(\"-password\");\r\n  // const user = userModel.email == email; //.select(\"-password\");//want to check it\r\n\r\n  const isPasswordCorrect = await user.comparePassword(password);\r\n\r\n  if (!isPasswordCorrect) {\r\n    throw new UnauthenticatedError(\"Invalid credentials!\");\r\n  }\r\n  const token = generateJwtToken(user._id);\r\n  console.log(\"token....\" + token);\r\n  // user.tokens = {};\r\n  user.tokens = user.tokens.concat({ token });\r\n\r\n  user.save();\r\n\r\n  res\r\n    .status(StatusCodes.OK)\r\n    .json({ status: 1, message: \"user login sucessfully \", user });\r\n});\r\n// update user\r\nconst updateUser = asyncWrapper(async (req, res, next) => {\r\n  const fieldsToupdate = Object.keys(req.body);\r\n\r\n  const allowedFieldToUpdate = [\"name\", \"email\"];\r\n  const isValidForUpdate = true;\r\n  fieldsToupdate.forEach((element) => {\r\n    if (!allowedFieldToUpdate.includes(element)) {\r\n      isValidForUpdate = false;\r\n    }\r\n  });\r\n  if (isValidForUpdate) {\r\n    // below strp not required after auth user\r\n    const user = req.authUser;\r\n    user.name = req.body.name;\r\n    user.save();\r\n    // user.email = req.body.email;\r\n    // const updateUser = await userModel.findOneAndUpdate(\r\n    // {\r\n    //     email: req.body.email,\r\n    // },\r\n    // {\r\n    //     // email: req.body.email,\r\n    //     name: req.body.name,\r\n    // },\r\n    // { new: true, runValidators: true }\r\n    // );\r\n    // if (!updateUser) {\r\n    // throw new UnauthenticatedError(\"no such user found!\");\r\n    // }\r\n    res\r\n      .status(StatusCodes.OK)\r\n      .json({ status: 1, message: \"user updated sucessfully\", user });\r\n  }\r\n});\r\n//forgot password\r\n\r\nconst forgotPassword = asyncWrapper(async (req, res, next) => {\r\n  if (!req.body.email) {\r\n    throw new BadRequestError(\"please provide email\");\r\n  }\r\n  const user = await userModel.findOne({ email: req.body.email });\r\n  if (!user) {\r\n    throw new UnauthenticatedError(\"user not found!\");\r\n  }\r\n\r\n  const OTP = Math.floor(Math.random() * (90000 - 10000 + 1) + 10000);\r\n  user.OTP = OTP;\r\n  user.save();\r\n  // res.status(StatusCodes.OK).json({\r\n  //   status: 1,\r\n  //   message: \"your OTP is \" + OTP,\r\n  // });\r\n\r\n  if (user) {\r\n    await emailSend(req, res, {\r\n      email: user.email,\r\n      name: user.name,\r\n      otp: OTP,\r\n      user: user,\r\n      subject: \"OTP\",\r\n    });\r\n  } else {\r\n    res.status(StatusCodes.NOT_FOUND).json({\r\n      status: 0,\r\n      message: \"something went wrong on forgotPassword process  \",\r\n    });\r\n  }\r\n});\r\n\r\nconst changePassword = asyncWrapper(async (req, res, next) => {\r\n  if (!req.body.oldPassword) {\r\n    throw new BadRequestError(\"please provide old password\");\r\n  }\r\n  if (!req.body.newPassword) {\r\n    throw new BadRequestError(\"please provide new Password\");\r\n  }\r\n  if (req.body.newPassword + \"\".length < 6) {\r\n    throw new BadRequestError(\r\n      \"password is too short, please provide proper password\"\r\n    );\r\n  }\r\n\r\n  const user = req.authUser;\r\n  const isPasswordCorrect = await user.comparePassword(req.body.oldPassword);\r\n\r\n  if (!isPasswordCorrect) {\r\n    throw new UnauthenticatedError(\r\n      \"Invalid Password, not authorized to change password!\"\r\n    );\r\n  }\r\n  if (!req.body.confirmPassword) {\r\n    throw new BadRequestError(\"please provide confirm Password\");\r\n  }\r\n\r\n  if (req.body.newPassword !== req.body.confirmPassword) {\r\n    throw new CustomAPIError(\"newPassword and confirmPassword not matching\");\r\n  }\r\n\r\n  user.password = req.body.newPassword;\r\n\r\n  user.save();\r\n  // await userModel.findOneAndUpdate(\r\n  //   {\r\n  //     email: user.email,\r\n  //   },\r\n  //   { password: req.body.confirmPassword },\r\n  //   {\r\n  //     new: true,\r\n  //     runValidators: true,\r\n  //   }\r\n  // );\r\n\r\n  res\r\n    .status(StatusCodes.OK)\r\n    .json({ status: 1, message: \"password reset sucessfully\" });\r\n});\r\nconst logOut = asyncWrapper(async (req, res, next) => {});\r\nmodule.exports = {\r\n  createNewUser,\r\n  verifyNewUser,\r\n  reSendOTP,\r\n  loginUser,\r\n  updateUser,\r\n  forgotPassword,\r\n  changePassword,\r\n  logOut,\r\n};\r\n"
        }
    ]
}